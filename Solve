import java.util.EmptyStackException;
import java.util.Stack;

/**
 * 
 */

/**
 * @author Anubhav
 *
 */
public class PostEval {
	/** Holds all numbers and expressions in the equation given by the user */
	@SuppressWarnings("rawtypes")
	private Stack stack;

	@SuppressWarnings("rawtypes")
	/**
	 * Constructor for PostEvalv, initializing the Stack.
	 */
	public PostEval() {
		stack = new Stack();
	}

	@SuppressWarnings("unchecked")
	/**
	 * Goes through the equation and based on what sign it is, it will calculate from the methods. Until a right parathesis is found in the string
	 * @param buffer: Equation that the user inputed
	 */
	public void evaluatePostfixExpression(StringBuffer buffer) {
		String bufferString = buffer.toString();
		String[] bufferSplit = bufferString.split(" ");
		int j=0;
		
			while (!bufferSplit[j].equals(")")) {
				if (bufferSplit[j].equals("+") || bufferSplit[j].equals("-")
						|| bufferSplit[j].equals("/")
						|| bufferSplit[j].equals("*")
						|| bufferSplit[j].equals("^")
						|| bufferSplit[j].equals("%")) {
					stack.push(Calculate(bufferSplit[j]));
				} else if (isNum(bufferSplit[j])) {
					stack.push(Integer.parseInt(bufferSplit[j]));
				} else {
					System.out.print("Error: Format Error\n ");
				}
				j++;
			

		}
	}

	/**
	 * If the string was a operator then it calculates the last two integers by
	 * popping them and calculate them.
	 * 
	 * @param buffer2
	 *            : String at location j from the string array
	 * @throws EmptyStackException
	 * 
	 */
	private int Calculate(String buffer2) {
		try {
			int op1 = (Integer) (stack.pop());
			int op2 = (Integer) (stack.pop());
			if (buffer2.equals("+")) {
				return (op1 + op2);
			} else if (buffer2.equals("-")) {
				return (op2 - op1);
			} else if (buffer2.equals("*")) {
				return (op1 * op2);

			} else if (buffer2.equals("/")) {
				return (op2 / op1);
			} else if (buffer2.equals("^")) {
				return (int) (Math.pow(op2, op1));
			} else if (buffer2.equals("%")) {
				return (op2 % op1);
			} else {
				return 0;
			}
		} catch (EmptyStackException e) {

		}
		return 0;
	}

	/**
	 * Checks if string inputed is a number
	 * 
	 * @param buffer2
	 *            : String at location j from the string array
	 * @return true: if the string was a number
	 * @return false: if it is an operator
	 */
	private boolean isNum(String buffer2) {
		int intCheck = Integer.parseInt(buffer2);
		if (intCheck / 1 == intCheck) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Returns the result to the main function for printing
	 * 
	 * @return result from calculations
	 */
	public int result() {

		return (Integer) (stack.pop());
	}

}
